import json
import os
import subprocess
import argparse
from dotenv import load_dotenv
from neo4j import GraphDatabase
from neo4j.exceptions import Neo4jError
from neo4j.graph import Node

# Load environment variables
load_dotenv()

DEFAULT_CYPHERS_FROM_LLM = "benchmark-gpt-4o-mini-2025_04_01-16_14_33_version_1.json"
# DEFAULT_CYPHERS_FROM_LLM = "text2cypher.json"

parser = argparse.ArgumentParser(description="Process CYPHERS_FROM_LLM argument")
parser.add_argument("--cypher_from_llm", 
                    type=str,
                    default=DEFAULT_CYPHERS_FROM_LLM,
                    help="The JSON file containing the Cypher queries generated by LLM")

args = parser.parse_args()
CYPHERS_FROM_LLM = args.cypher_from_llm #"." + ".".join(args.cypher_from_llm.split(".")[2:])

# Neo4j connection details
NEO4J_URI = os.getenv("NEO4J_URI")
NEO4J_USERNAME = os.getenv("NEO4J_USERNAME")
NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD")
NEO4J_DATABASE_NAME = os.getenv("NEO4J_DATABASE_NAME")
KG_NAME = None
if NEO4J_DATABASE_NAME == "neo4j":
    KG_NAME = "ionchannels"
elif NEO4J_DATABASE_NAME == "prokino-kg":
    KG_NAME = "prokino"
input_file_path = f'./results/{KG_NAME}/{CYPHERS_FROM_LLM}'
output_file_path = input_file_path.replace('.json', '-with_results.json')

driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USERNAME, NEO4J_PASSWORD))

# def clean_value(value):
#     return value.replace('\u00a0', ' ').strip() if isinstance(value, str) else value

def clean_value(value):
    if isinstance(value, Node):
        # Convert Node object to a dictionary
        return dict(value.items())
    elif isinstance(value, str):
        return value.replace('\u00a0', ' ').strip()
    return value

def run_cypher_query(query):
    try:
        with driver.session(database=NEO4J_DATABASE_NAME) as session:
            if query:
                results = session.run(query)
                result_list = [[clean_value(value) for value in record.values()] for record in results]
                return result_list
            else:
                return []
    except Neo4jError as e:
        print(f"Neo4j query failed: {e}")
        return []

# Read the input JSON file
try:
    with open(input_file_path, 'r') as file:
        data = json.load(file)
except json.JSONDecodeError as e:
    print(f"Failed to decode JSON file: {e}")
    exit(1)

# Process each item in the JSON data
for item in data:
    for version, details in item.get("results", {}).items():
        if "cypher_query" in details:
            query = details["cypher_query"]
            cypher_result = run_cypher_query(query)
            details["cypher_result"] = cypher_result  # Always set to the result list (empty or not)

# Write the updated data to the output JSON file
with open(output_file_path, 'w') as file:
    json.dump(data, file, indent=4)

# Close the Neo4j driver
driver.close()

print(f"Updated JSON file saved as {output_file_path}")

run_script = input("Do you want to run the calculate_scores_precision_recall script? (Y/N): ").strip().lower()
if run_script == 'y':
    subprocess.run(["python", "./src/calculate_scores_precision_recall.py", "--cypher_results", output_file_path.split("/")[-1]])